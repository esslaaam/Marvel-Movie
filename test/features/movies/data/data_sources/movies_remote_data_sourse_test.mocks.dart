// Mocks generated by Mockito 5.4.4 from annotations
// in movie_app/test/features/movies/data/data_sources/movies_remote_data_sourse_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:movie_app/features/movies/data/models/movie_model.dart' as _i2;
import 'package:movie_app/features/movies/data/models/search_model.dart' as _i5;
import 'package:movie_app/features/movies/data/networking/movies_api_client.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMoviesResponseModel_0 extends _i1.SmartFake
    implements _i2.MoviesResponseModel {
  _FakeMoviesResponseModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MoviesApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockMoviesApiClient extends _i1.Mock implements _i3.MoviesApiClient {
  @override
  _i4.Future<_i2.MoviesResponseModel> fetchMovies({
    String? apiKey = r'd58e28b9d1481eefde876995ddddc816',
    String? hash = r'bdf3ea30f988f407f46064f33e9db5a5',
    String? ts = r'1699611552563',
    String? limit = r'15',
    int? pageNumber = 0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchMovies,
          [],
          {
            #apiKey: apiKey,
            #hash: hash,
            #ts: ts,
            #limit: limit,
            #pageNumber: pageNumber,
          },
        ),
        returnValue: _i4.Future<_i2.MoviesResponseModel>.value(
            _FakeMoviesResponseModel_0(
          this,
          Invocation.method(
            #fetchMovies,
            [],
            {
              #apiKey: apiKey,
              #hash: hash,
              #ts: ts,
              #limit: limit,
              #pageNumber: pageNumber,
            },
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.MoviesResponseModel>.value(
            _FakeMoviesResponseModel_0(
          this,
          Invocation.method(
            #fetchMovies,
            [],
            {
              #apiKey: apiKey,
              #hash: hash,
              #ts: ts,
              #limit: limit,
              #pageNumber: pageNumber,
            },
          ),
        )),
      ) as _i4.Future<_i2.MoviesResponseModel>);

  @override
  _i4.Future<_i2.MoviesResponseModel> fetchSearchMovies({
    String? apiKey = r'd58e28b9d1481eefde876995ddddc816',
    String? hash = r'bdf3ea30f988f407f46064f33e9db5a5',
    String? ts = r'1699611552563',
    String? limit = r'15',
    int? pageNumber = 0,
    required String? textSearch,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchSearchMovies,
          [],
          {
            #apiKey: apiKey,
            #hash: hash,
            #ts: ts,
            #limit: limit,
            #pageNumber: pageNumber,
            #textSearch: textSearch,
          },
        ),
        returnValue: _i4.Future<_i2.MoviesResponseModel>.value(
            _FakeMoviesResponseModel_0(
          this,
          Invocation.method(
            #fetchSearchMovies,
            [],
            {
              #apiKey: apiKey,
              #hash: hash,
              #ts: ts,
              #limit: limit,
              #pageNumber: pageNumber,
              #textSearch: textSearch,
            },
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.MoviesResponseModel>.value(
            _FakeMoviesResponseModel_0(
          this,
          Invocation.method(
            #fetchSearchMovies,
            [],
            {
              #apiKey: apiKey,
              #hash: hash,
              #ts: ts,
              #limit: limit,
              #pageNumber: pageNumber,
              #textSearch: textSearch,
            },
          ),
        )),
      ) as _i4.Future<_i2.MoviesResponseModel>);
}

/// A class which mocks [MoviesResponseModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockMoviesResponseModel extends _i1.Mock
    implements _i2.MoviesResponseModel {
  @override
  set code(int? _code) => super.noSuchMethod(
        Invocation.setter(
          #code,
          _code,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set status(String? _status) => super.noSuchMethod(
        Invocation.setter(
          #status,
          _status,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set copyright(String? _copyright) => super.noSuchMethod(
        Invocation.setter(
          #copyright,
          _copyright,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set attributionText(String? _attributionText) => super.noSuchMethod(
        Invocation.setter(
          #attributionText,
          _attributionText,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set attributionHTML(String? _attributionHTML) => super.noSuchMethod(
        Invocation.setter(
          #attributionHTML,
          _attributionHTML,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set etag(String? _etag) => super.noSuchMethod(
        Invocation.setter(
          #etag,
          _etag,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set data(_i2.Data? _data) => super.noSuchMethod(
        Invocation.setter(
          #data,
          _data,
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SearchModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchModel extends _i1.Mock implements _i5.SearchModel {
  @override
  int get pageNumber => (super.noSuchMethod(
        Invocation.getter(#pageNumber),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  String get textSearch => (super.noSuchMethod(
        Invocation.getter(#textSearch),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#textSearch),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#textSearch),
        ),
      ) as String);
}
